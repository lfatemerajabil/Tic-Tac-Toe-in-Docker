# Tic-Tac-Toe with LLM Opponent

This is a simple web-based Tic-Tac-Toe game where you play as "X" against an AI opponent powered by a Language Learning Model (LLM), which plays as "O". The game runs on a basic HTTP server.

## Features

- **Human vs AI**: The human player always plays as "X", and the LLM plays as "O".
- **Automatic Move**: The AI makes its move immediately after the human player.
- **Game Over Detection**: The game detects a win or a draw and displays the result.
- **Restart Game**: You can restart the game at any time.

## Running Locally

### Prerequisites

- Python 3.x installed on your machine.

### Steps to Run

1. Clone the repository:

    ```bash
    git clone https://github.com/yourusername/tic-tac-toe-llm.git
    cd tic-tac-toe-llm
    ```

2. Install the required packages (if any):

    ```bash
    pip install -r requirements.txt
    ```

3. Run the server:

    ```bash
    python tic_tac_toe_server.py
    ```

4. Open your browser and go to `http://localhost:8080`.

## Running with Docker

### Prerequisites

- Docker installed on your machine.
- Docker Compose installed.

### Steps to Run

1. Clone the repository:

    ```bash
    git clone https://github.com/yourusername/tic-tac-toe-llm.git
    cd tic-tac-toe-llm
    ```

2. Build the Docker image:

    ```bash
    docker build -t tic-tac-toe-llm .
    ```

3. Run the container:

    ```bash
    docker run -d -p 8080:8080 tic-tac-toe-llm
    ```

4. Open your browser and go to `http://localhost:8080`.

### Docker Compose

You can also use Docker Compose to manage the service.

1. Clone the repository:

    ```bash
    git clone https://github.com/yourusername/tic-tac-toe-llm.git
    cd tic-tac-toe-llm
    ```

2. Use Docker Compose to build and run the container:

    ```bash
    docker-compose up -d
    ```

3. Open your browser and go to `http://localhost:8080`.

### Dockerfile

Here's the Dockerfile used to build the image:

```dockerfile
# Use an official Python runtime as a parent image
FROM python:3.9-slim

# Set the working directory in the container
WORKDIR /app

# Copy the current directory contents into the container at /app
COPY . /app

# Install any needed packages specified in requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

# Make port 8080 available to the world outside this container
EXPOSE 8080

# Run the application
CMD ["python", "tic_tac_toe_server.py"]
